import requests
from bs4 import BeautifulSoup
import pandas as pd
import os

# === Funciones de scraping ===

def obtener_tabla_posiciones():
    url = "https://www.marca.com/futbol/primera-division/clasificacion.html"
    res = requests.get(url)
    soup = BeautifulSoup(res.text, "html.parser")

    equipos = [e.text.strip() for e in soup.select(".team-nm")]
    puntos = [p.text.strip() for p in soup.select(".pts")]
    pj = [j.text.strip() for j in soup.select(".pj")]
    pg = [g.text.strip() for g in soup.select(".pg")]
    pe = [e.text.strip() for e in soup.select(".pe")]
    pp = [p.text.strip() for p in soup.select(".pp")]

    df = pd.DataFrame({
        "Pos": range(1, len(equipos) + 1),
        "Equipo": equipos,
        "PJ": pj,
        "PG": pg,
        "PE": pe,
        "PP": pp,
        "Pts": puntos
    })
    return df


def obtener_goleadores():
    url = "https://www.marca.com/futbol/primera-division/maximos-goleadores.html"
    res = requests.get(url)
    soup = BeautifulSoup(res.text, "html.parser")

    jugadores = [j.text.strip() for j in soup.select(".nombre")]
    equipos = [e.text.strip() for e in soup.select(".equipo")]
    goles = [g.text.strip() for g in soup.select(".dato.goles")]

    df = pd.DataFrame({
        "Pos": range(1, len(jugadores) + 1),
        "Jugador": jugadores,
        "Equipo": equipos,
        "Goles": goles
    })
    return df


def obtener_asistidores():
    url = "https://www.marca.com/futbol/primera-division/maximos-asistentes.html"
    res = requests.get(url)
    soup = BeautifulSoup(res.text, "html.parser")

    jugadores = [j.text.strip() for j in soup.select(".nombre")]
    equipos = [e.text.strip() for e in soup.select(".equipo")]
    asistencias = [a.text.strip() for a in soup.select(".dato.asistencias")]

    df = pd.DataFrame({
        "Pos": range(1, len(jugadores) + 1),
        "Jugador": jugadores,
        "Equipo": equipos,
        "Asistencias": asistencias
    })
    return df


# === Funciones de men√∫ ===

def mostrar_tabla(df, titulo):
    print(f"\n{'='*60}")
    print(f"üèÜ {titulo.upper()}")
    print(f"{'='*60}")
    print(df.head(10).to_string(index=False))
    print("\n(Se muestran los primeros 10 registros)")

def guardar_csv(df, nombre_archivo):
    df.to_csv(nombre_archivo, index=False)
    print(f"‚úÖ Archivo guardado como: {os.path.abspath(nombre_archivo)}")

# === Programa principal ===

def main():
    while True:
        print("\n‚öΩ=== MEN√ö LIGA ESPA√ëOLA ===‚öΩ")
        print("1Ô∏è‚É£  Ver tabla de posiciones")
        print("2Ô∏è‚É£  Ver tabla de goleadores")
        print("3Ô∏è‚É£  Ver tabla de asistidores")
        print("4Ô∏è‚É£  Descargar todas las tablas en CSV")
        print("5Ô∏è‚É£  Salir")

        opcion = input("\nüëâ Elige una opci√≥n: ")

        if opcion == "1":
            df = obtener_tabla_posiciones()
            mostrar_tabla(df, "Tabla de posiciones")
        elif opcion == "2":
            df = obtener_goleadores()
            mostrar_tabla(df, "Tabla de goleadores")
        elif opcion == "3":
            df = obtener_asistidores()
            mostrar_tabla(df, "Tabla de asistidores")
        elif opcion == "4":
            print("üì• Descargando y guardando archivos...")
            guardar_csv(obtener_tabla_posiciones(), "tabla_posiciones.csv")
            guardar_csv(obtener_goleadores(), "tabla_goleadores.csv")
            guardar_csv(obtener_asistidores(), "tabla_asistidores.csv")
        elif opcion == "5":
            print("üëã ¬°Hasta luego, bro! ‚öΩüî•")
            break
        else:
            print("‚ùå Opci√≥n no v√°lida, intenta otra vez.")


if _name_ == "_main_":
    main()
